import React, { useState, useEffect } from 'react';
import './DashboardPage.css';
import Icon from '../../components/Icon/Icon';
import * as api from '../../services/api';

const Header = ({ activeScreen, onScreenChange }) => {
  return (
    <header className="dash-header">
      <div className="dash-header-left">
        <Icon name="logi-enerance" width={200} height={45} className="dash-logo" alt="–ö–ê–ò logo" />
        <div className="dash-title">
          <Icon name="autovisit" width={582} height={50} className="dash-logo" alt="–ö–ê–ò –ê–≤—Ç–æ–≤–∏–∑–∏—Ç" />
        </div>
      </div>
      <div className="dash-header-right">
        <button 
          className={`dash-btn dash-btn-secondary ${activeScreen === 'tasks' ? 'dash-btn--active' : ''}`}
          onClick={() => onScreenChange('tasks')}
        >
          <Icon name="truck" width={20} height={20} className="dash-logo" alt="" />–ó–∞–¥–∞–Ω–∏—è
        </button>
        <button 
          className={`dash-btns dash-btn-icon ${activeScreen === 'settings' ? 'dash-btn--active' : ''}`}
          aria-label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
          onClick={() => onScreenChange('settings')}
        >
          <Icon name="settings" width={20} height={20} className="dash-logo" alt="–ù–∞—Å—Ç—Ä–æ–π–∫–∏" />
        </button>
      </div>
    </header>
  );
};

const ActionsBar = ({ 
  onAddTask, 
  filterMode, 
  onFilterChange, 
  searchValue, 
  onSearchChange,
  onStartSequential,
  onStartParallel,
  onStopAutomation
}) => {
  return (
    <div className="dash-actions">
      <button className="dash-btn dash-btn-primary" onClick={onAddTask}><Icon name="circle-plus" width={20} height={20} className="dash-logo" alt="" />–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ</button>
      <button className="dash-btn" onClick={onStartSequential}><Icon name="reply" width={20} height={20} className="dash-logo" alt="" />–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ</button>
      <button className="dash-btn" onClick={onStartParallel}><Icon name="reply-all" width={20} height={20} className="dash-logo" alt="" />–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ</button>
      <button className="dash-btn dash-btn-danger" onClick={onStopAutomation}><Icon name="circle-x" width={20} height={20} className="dash-logo" alt="" />–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é</button>
      <button 
        className={`dash-btn dash-btn-filter ${filterMode === 'current' ? 'active' : ''}`}
        onClick={() => onFilterChange('current')}
      >
        –¢
      </button>
      <button 
        className={`dash-btn dash-btn-filter ${filterMode === 'archive' ? 'active' : ''}`}
        onClick={() => onFilterChange('archive')}
      >
        –ê
      </button>
      <div className="dash-search-container">
        <Icon name="search" width={20} height={20} className="search-icon" alt="–ü–æ–∏—Å–∫" />
        <input 
          className="dash-search" 
          placeholder="–ü–æ–∏—Å–∫" 
          value={searchValue}
          onChange={(e) => onSearchChange(e.target.value)}
        />
      </div>
    </div>
  );
};

const StatusBadge = ({ type, children }) => {
  const labels = {
    running: '–ó–∞–ø—É—â–µ–Ω–æ',
    new: '–ù–æ–≤–æ–µ',
    stop: '–°—Ç–æ–ø',
    error: '–û—à–∏–±–∫–∞',
    completed: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
  };
  return <span className={`status-badge status-${type}`}>{children || labels[type]}</span>;
};

// –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ API –≤ —Ç–∏–ø –¥–ª—è StatusBadge
const mapStatusFromAPI = (apiStatus, inWork) => {
  if (inWork) return 'running';
  if (apiStatus === '–ù–æ–≤—ã–π') return 'new';
  if (apiStatus === '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' || apiStatus === '–ó–∞–≤–µ—Ä—à–µ–Ω') return 'completed';
  if (apiStatus === '–û—à–∏–±–∫–∞') return 'error';
  if (apiStatus === '–°—Ç–æ–ø') return 'stop';
  return 'new';
};

// –ü–∞–Ω–µ–ª—å —Å–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞–º–∏ (3 –∫–æ–ª–æ–Ω–∫–∏)
const DirectoryPanel = ({ 
  contracts = [], 
  drivers = [], 
  plates = [],
  onAddContract,
  onAddDriver,
  onAddPlate,
  onDeleteContract,
  onDeleteDriver,
  onDeletePlate,
  searchDirectory,
  setSearchDirectory
}) => {
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
  const filteredContracts = contracts.filter(contract => 
    contract.value && contract.value.toLowerCase().includes(searchDirectory.toLowerCase())
  );
  const filteredDrivers = drivers.filter(driver => 
    driver.value && driver.value.toLowerCase().includes(searchDirectory.toLowerCase())
  );
  const filteredPlates = plates.filter(plate => 
    plate.value && plate.value.toLowerCase().includes(searchDirectory.toLowerCase())
  );

  return (
    <div className="dash-panel">
      <div className="directory-header-container">
        <button className="directory-col-header-bt" disabled>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏</button>
        <div className="directory-search-container">
          <Icon name="search" width={20} height={20} className="search-icon" alt="–ü–æ–∏—Å–∫" />
          <input 
            className="directory-search" 
            placeholder="–ü–æ–∏—Å–∫" 
            value={searchDirectory}
            onChange={(e) => setSearchDirectory(e.target.value)}
          />
        </div>
      </div>
      <div className="directory-grid">
        <div className="directory-col">
          <div className="directory-list">
            {filteredContracts.map((contract) => (
              <div className="directory-item" key={contract.id}>
                {contract.value}
                <button 
                  className="action-btn action-btn-delete" 
                  onClick={() => onDeleteContract(contract.id)}
                  aria-label="–£–¥–∞–ª–∏—Ç—å"
                  style={{ float: 'right', marginLeft: '10px' }}
                >
                  üóëÔ∏è
                </button>
              </div>
            ))}
          </div>
          <div className="directory-actions">
            <button className="dash-btn dash-btn-primary" onClick={onAddContract}><Icon name="circle-plus" width={18} height={18} />–î–æ–±–∞–≤–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä</button>
          </div>
        </div>
        <div className="directory-col">
          <div className="directory-list">
            {filteredDrivers.map((driver) => (
              <div className="directory-item" key={driver.id}>
                {driver.value}
                <button 
                  className="action-btn action-btn-delete" 
                  onClick={() => onDeleteDriver(driver.id)}
                  aria-label="–£–¥–∞–ª–∏—Ç—å"
                  style={{ float: 'right', marginLeft: '10px' }}
                >
                  üóëÔ∏è
                </button>
              </div>
            ))}
          </div>
          <div className="directory-actions">
            <button className="dash-btn dash-btn-primary" onClick={onAddDriver}><Icon name="circle-plus" width={18} height={18} />–î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è</button>
          </div>
        </div>
        <div className="directory-col">
          <div className="directory-list">
            {filteredPlates.map((plate) => (
              <div className="directory-item" key={plate.id}>
                {plate.value}
                <button 
                  className="action-btn action-btn-delete" 
                  onClick={() => onDeletePlate(plate.id)}
                  aria-label="–£–¥–∞–ª–∏—Ç—å"
                  style={{ float: 'right', marginLeft: '10px' }}
                >
                  üóëÔ∏è
                </button>
              </div>
            ))}
          </div>
          <div className="directory-actions">
            <button className="dash-btn dash-btn-primary" onClick={onAddPlate}><Icon name="circle-plus" width={18} height={18} />–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å. –Ω–æ–º–µ—Ä</button>
          </div>
        </div>
      </div>
    </div>
  );
};

// –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫
const SettingsPanel = ({ 
  settings = {},
  onSettingsChange,
  onTestConnection,
  onSaveSettings
}) => {
  return (
    <div className="dash-panel settings-panel">
      <div className="settings-form">
        <div className="form-row">
          <label>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫):</label>
          <input 
            className="form-input" 
            type="number"
            value={settings.refresh_interval || ''}
            onChange={(e) => onSettingsChange('refresh_interval', parseInt(e.target.value))}
          />
        </div>
        <div className="form-row">
          <label>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫:</label>
          <input 
            className="form-input" 
            type="number"
            value={settings.default_execution_attempts || ''}
            onChange={(e) => onSettingsChange('default_execution_attempts', parseInt(e.target.value))}
          />
        </div>
        <div className="form-row">
          <label>–ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ (–º–∏–Ω):</label>
          <input 
            className="form-input" 
            type="number"
            value={settings.default_delay_try || ''}
            onChange={(e) => onSettingsChange('default_delay_try', parseInt(e.target.value))}
          />
        </div>
        <div className="form-row">
          <label>–¢–∞–π–º–∞—É—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Å–µ–∫):</label>
          <input 
            className="form-input" 
            type="number"
            value={settings.element_timeout || ''}
            onChange={(e) => onSettingsChange('element_timeout', parseInt(e.target.value))}
          />
        </div>
        <button className="dash-btn dash-btn-primary" onClick={onSaveSettings} style={{  }}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
        <div className="form-row">
          <label>URL —Å–∞–π—Ç–∞:</label>
          <input 
            className="form-input" 
            value={settings.site_url || ''}
            onChange={(e) => onSettingsChange('site_url', e.target.value)}
          />
        </div>
        <div className="form-row">
          <label>–õ–æ–≥–∏–Ω:</label>
          <input 
            className="form-input" 
            value={settings.login || ''}
            onChange={(e) => onSettingsChange('login', e.target.value)}
          />
        </div>
        <div className="form-row">
          <label>–ü–∞—Ä–æ–ª—å:</label>
          <input 
            className="form-input" 
            type="password"
            value={settings.password || ''}
            onChange={(e) => onSettingsChange('password', e.target.value)}
          />
        </div>
        <div className="form-actions">
          <button className="dash-btn" onClick={onTestConnection}>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</button>
        </div>
      </div>
    </div>
  );
};

const TaskTable = ({ tasks, onDeleteTask, onTaskChange, onSaveTask, onEditTask }) => {
  const handleChange = (taskId, field, value) => {
    onTaskChange(taskId, field, value);
  };

  return (
    <div className="table-wrapper">
      <table className="dash-table">
        <thead>
          <tr>
            <th>–ß–µ–∫</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞</th>
            <th>–§—É–Ω–∫—Ü–∏—è</th>
            <th>–°–ª–æ—Ç (–≤—Ä–µ–º—è)</th>
            <th>–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä</th>
            <th>–†–µ–ª–∏–∑</th>
            <th>–ì–æ—Å. –Ω–æ–º–µ—Ä</th>
            <th>–í–æ–¥–∏—Ç–µ–ª—å</th>
            <th>–î–æ–≥–æ–≤–æ—Ä</th>
          </tr>
        </thead>
        <tbody>
          {tasks.map((task) => (
            <tr key={task.id}>
              <td>
                <input 
                  type="checkbox" 
                  checked={task.checked}
                  onChange={(e) => handleChange(task.id, 'checked', e.target.checked)}
                />
              </td>
              <td>
                <StatusBadge type={task.status} />
              </td>
              <td>
                {task.isNew || task.isEditing ? (
                  <input 
                    type="text" 
                    className="table-input" 
                    value={task.date || ''}
                    onChange={(e) => handleChange(task.id, 'date', e.target.value)}
                    placeholder="–î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞"
                  />
                ) : (
                  task.date
                )}
              </td>
              <td>
                {task.isNew || task.isEditing ? (
                  <input 
                    type="text" 
                    className="table-input" 
                    value={task.func || ''}
                    onChange={(e) => handleChange(task.id, 'func', e.target.value)}
                    placeholder="–§—É–Ω–∫—Ü–∏—è"
                  />
                ) : (
                  task.func
                )}
              </td>
              <td>
                {task.isNew || task.isEditing ? (
                  <input 
                    type="text" 
                    className="table-input" 
                    value={task.slot || ''}
                    onChange={(e) => handleChange(task.id, 'slot', e.target.value)}
                    placeholder="–°–ª–æ—Ç (–≤—Ä–µ–º—è)"
                  />
                ) : (
                  task.slot
                )}
              </td>
              <td>
                {task.isNew || task.isEditing ? (
                  <input 
                    type="text" 
                    className="table-input" 
                    value={task.cont || ''}
                    onChange={(e) => handleChange(task.id, 'cont', e.target.value)}
                    placeholder="–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä"
                  />
                ) : (
                  task.cont
                )}
              </td>
              <td>
                {task.isNew || task.isEditing ? (
                  <input 
                    type="text" 
                    className="table-input" 
                    value={task.rel || ''}
                    onChange={(e) => handleChange(task.id, 'rel', e.target.value)}
                    placeholder="–†–µ–ª–∏–∑"
                  />
                ) : (
                  task.rel
                )}
              </td>
              <td>
                {task.isNew || task.isEditing ? (
                  <input 
                    type="text" 
                    className="table-input" 
                    value={task.plate || ''}
                    onChange={(e) => handleChange(task.id, 'plate', e.target.value)}
                    placeholder="–ì–æ—Å. –Ω–æ–º–µ—Ä"
                  />
                ) : (
                  task.plate
                )}
              </td>
              <td className="driver-cell">
                {task.isNew || task.isEditing ? (
                  <input 
                    type="text" 
                    className="table-input" 
                    value={task.driver || ''}
                    onChange={(e) => handleChange(task.id, 'driver', e.target.value)}
                    placeholder="–í–æ–¥–∏—Ç–µ–ª—å"
                  />
                ) : (
                  task.driver
                )}
              </td>
              <td style={{ position: 'relative' }}>
                {task.isNew || task.isEditing ? (
                  <>
                    <input 
                      type="text" 
                      className="table-input" 
                      value={task.contract || ''}
                      onChange={(e) => handleChange(task.id, 'contract', e.target.value)}
                      placeholder="–î–æ–≥–æ–≤–æ—Ä"
                    />
                    <div className="action-icons">
                      <button 
                        className="action-btn action-btn-send" 
                        onClick={() => onSaveTask(task.id)}
                        aria-label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                        title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                      >
                        ‚û§
                      </button>
                    </div>
                  </>
                ) : (
                  <>
                    {task.contract}
                    <div className="action-icons">
                      <button 
                        className="action-btn action-btn-edit" 
                        onClick={() => onEditTask(task.id)}
                        aria-label="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
                      >
                        üìù
                      </button>
                      <button 
                        className="action-btn action-btn-delete" 
                        onClick={() => onDeleteTask(task.id)}
                        aria-label="–£–¥–∞–ª–∏—Ç—å"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

const DashboardPage = () => {
  const [tasks, setTasks] = useState([]);
  const [filterMode, setFilterMode] = useState('current');
  const [searchValue, setSearchValue] = useState('');
  const [activeScreen, setActiveScreen] = useState('tasks');
  const [settings, setSettings] = useState({});
  const [references, setReferences] = useState({
    car_numbers: [],
    drivers: [],
    terminal_contracts: []
  });
  const [loading, setLoading] = useState(false);
  const [searchDirectory, setSearchDirectory] = useState('');

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API –≤ —Ñ–æ—Ä–º–∞—Ç UI
  const mapTaskFromAPI = (apiTask) => {
    return {
      id: apiTask.id,
      status: mapStatusFromAPI(apiTask.status, apiTask.in_work),
      date: apiTask.date || '',
      func: apiTask.type_task || '',
      slot: apiTask.time_slot || '',
      cont: apiTask.number_container || '',
      rel: apiTask.release_order || '',
      plate: apiTask.num_auto || '',
      driver: apiTask.driver || '',
      contract: apiTask.contract_terminal || '',
      checked: false,
      isNew: false,
      isEditing: false,
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      _original: apiTask
    };
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö UI –≤ —Ñ–æ—Ä–º–∞—Ç API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const mapTaskToAPI = (task) => {
    const baseData = task._original || {};
    return {
      id: task._original?.id,
      in_work: task.status === 'running',
      type_task: task.func,
      status: task.status === 'new' ? '–ù–æ–≤—ã–π' : (task._original?.status || '–ù–æ–≤—ã–π'),
      date: task.date,
      time_slot: task.slot,
      num_auto: task.plate,
      driver: task.driver,
      place: task._original?.place || '',
      index_container: task._original?.index_container || '',
      number_container: task.cont,
      release_order: task.rel,
      contract_terminal: task.contract,
      time_cancel: task._original?.time_cancel || 30,
      count_try: task._original?.count_try || 60,
      delay_try: task._original?.delay_try || 60
    };
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π
  const loadTasks = async () => {
    try {
      setLoading(true);
      const apiTasks = await api.getTasks();
      const mappedTasks = apiTasks.map(mapTaskFromAPI);
      setTasks(mappedTasks);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', error);
      alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏ "–ó–∞–¥–∞–Ω–∏—è"
  useEffect(() => {
    if (activeScreen === 'tasks') {
      loadTasks();
    }
  }, [activeScreen]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const loadSettings = async () => {
    try {
      const settingsData = await api.getSettings();
      setSettings(settingsData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
  const loadReferences = async () => {
    try {
      const refs = await api.getReferences();
      setReferences({
        car_numbers: refs.car_numbers || [],
        drivers: refs.drivers || [],
        terminal_contracts: refs.terminal_contracts || []
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤:', error);
      alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: ${error.message}`);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
  useEffect(() => {
    if (activeScreen === 'settings') {
      loadSettings();
      loadReferences();
    }
  }, [activeScreen]);

  // –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  const handleAddTask = () => {
    const newTask = {
      id: `temp-${Date.now()}`,
      status: 'new',
      date: '',
      func: '',
      slot: '',
      cont: '',
      rel: '',
      plate: '',
      driver: '',
      contract: '',
      checked: false,
      isNew: true,
      isEditing: false
    };
    setTasks([newTask, ...tasks]);
  };

  // –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  const handleDeleteTask = async (taskId) => {
    if (!window.confirm('–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ?')) {
      return;
    }

    try {
      const task = tasks.find(t => t.id === taskId);
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
      if (task.isNew || taskId.toString().startsWith('temp-')) {
        setTasks(tasks.filter(t => t.id !== taskId));
        return;
      }

      await api.deleteTask(taskId);
      await loadTasks();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: ${error.message}`);
    }
  };

  // –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  const handleTaskChange = (taskId, field, value) => {
    setTasks(tasks.map(task => 
      task.id === taskId ? { ...task, [field]: value } : task
    ));
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ (—Å–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å)
  const handleSaveTask = async (taskId) => {
    const task = tasks.find(t => t.id === taskId);
    if (!task) return;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!task.func || !task.date || !task.slot || !task.plate || !task.driver) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –§—É–Ω–∫—Ü–∏—è, –î–∞—Ç–∞ —Å—Ç–∞—Ä—Ç–∞, –°–ª–æ—Ç, –ì–æ—Å. –Ω–æ–º–µ—Ä, –í–æ–¥–∏—Ç–µ–ª—å');
      return;
    }

    try {
      const taskData = mapTaskToAPI(task);
      
      if (task.isNew || taskId.toString().startsWith('temp-')) {
        // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        await api.createTask(taskData);
        await loadTasks();
      } else {
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        await api.updateTask(taskData);
        await loadTasks();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è: ${error.message}`);
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  const handleEditTask = (taskId) => {
    setTasks(tasks.map(task => 
      task.id === taskId ? { ...task, isEditing: true } : task
    ));
  };

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ
  const handleStartSequential = async () => {
    const selectedTasks = tasks
      .filter(task => !task.isNew && task.checked && task.status !== 'running')
      .map(task => task.id);
    
    if (selectedTasks.length === 0) {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ
      const allTasks = tasks
        .filter(task => !task.isNew && task.status !== 'running')
        .map(task => task.id);
      
      if (allTasks.length === 0) {
        alert('–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞');
        return;
      }
      selectedTasks.push(...allTasks);
    }

    try {
      await api.startAutomation(selectedTasks, false);
      alert('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –ø–æ–æ—á–µ—Ä–µ–¥–Ω–æ');
      await loadTasks();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      alert(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }
  };

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  const handleStartParallel = async () => {
    const selectedTasks = tasks
      .filter(task => !task.isNew && task.checked && task.status !== 'running')
      .map(task => task.id);
    
    if (selectedTasks.length === 0) {
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ
      const allTasks = tasks
        .filter(task => !task.isNew && task.status !== 'running')
        .map(task => task.id);
      
      if (allTasks.length === 0) {
        alert('–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞');
        return;
      }
      selectedTasks.push(...allTasks);
    }

    try {
      await api.startAutomation(selectedTasks, true);
      alert('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ');
      await loadTasks();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      alert(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é
  const handleStopAutomation = async () => {
    try {
      await api.stopAutomation();
      alert('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      await loadTasks();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      alert(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }
  };

  // –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const handleSettingsChange = (field, value) => {
    setSettings(prev => ({ ...prev, [field]: value }));
  };

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const handleTestConnection = async () => {
    if (!settings.site_url || !settings.login || !settings.password) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ URL —Å–∞–π—Ç–∞, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
      return;
    }

    try {
      const result = await api.testConnection({
        site_url: settings.site_url,
        login: settings.login,
        password: settings.password
      });

      if (result.success) {
        alert(`‚úÖ ${result.message} (${result.duration}ms)`);
      } else {
        alert(`‚ùå ${result.message}: ${result.error}`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const handleSaveSettings = async () => {
    try {
      await api.saveSettings(settings);
      alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
      await loadSettings();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      alert(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`);
    }
  };

  // –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫
  const handleAddReference = async (type, label) => {
    const value = prompt(`–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ${label}:`);
    if (!value) return;

    try {
      await api.addReference(type, value);
      alert(`${label} –¥–æ–±–∞–≤–ª–µ–Ω`);
      await loadReferences();
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${label}:`, error);
      alert(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${label}: ${error.message}`);
    }
  };

  // –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
  const handleDeleteReference = async (type, itemId, label) => {
    if (!window.confirm(`–£–¥–∞–ª–∏—Ç—å ${label}?`)) {
      return;
    }

    try {
      await api.deleteReference(type, itemId);
      await loadReferences();
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${label}:`, error);
      alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ${label}: ${error.message}`);
    }
  };

  const filteredTasks = tasks.filter(task => {
    if (filterMode === 'archive') {
      return task.status === 'completed';
    }
    return task.status !== 'completed';
  }).filter(task => {
    if (!searchValue) return true;
    const search = searchValue.toLowerCase();
    return Object.values(task).some(value => 
      String(value).toLowerCase().includes(search)
    );
  });

  return (
    <div className="dashboard-page">
      <Header activeScreen={activeScreen} onScreenChange={setActiveScreen} />

      {activeScreen === 'tasks' ? (
        <>
          <ActionsBar 
            onAddTask={handleAddTask}
            filterMode={filterMode}
            onFilterChange={setFilterMode}
            searchValue={searchValue}
            onSearchChange={setSearchValue}
            onStartSequential={handleStartSequential}
            onStartParallel={handleStartParallel}
            onStopAutomation={handleStopAutomation}
          />
          {loading && <div style={{ padding: '20px', textAlign: 'center' }}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>}
          <TaskTable 
            tasks={filteredTasks}
            onDeleteTask={handleDeleteTask}
            onTaskChange={handleTaskChange}
            onSaveTask={handleSaveTask}
            onEditTask={handleEditTask}
          />
        </>
      ) : (
        <div className="dash-content">
          <div className="dash-col dash-col-left">
            <DirectoryPanel 
              contracts={references.terminal_contracts}
              drivers={references.drivers}
              plates={references.car_numbers}
              onAddContract={() => handleAddReference('contracts', '–¥–æ–≥–æ–≤–æ—Ä')}
              onAddDriver={() => handleAddReference('drivers', '–≤–æ–¥–∏—Ç–µ–ª—å')}
              onAddPlate={() => handleAddReference('autos', '–≥–æ—Å. –Ω–æ–º–µ—Ä')}
              onDeleteContract={(id) => handleDeleteReference('contracts', id, '–¥–æ–≥–æ–≤–æ—Ä')}
              onDeleteDriver={(id) => handleDeleteReference('drivers', id, '–≤–æ–¥–∏—Ç–µ–ª—å')}
              onDeletePlate={(id) => handleDeleteReference('autos', id, '–≥–æ—Å. –Ω–æ–º–µ—Ä')}
              searchDirectory={searchDirectory}
              setSearchDirectory={setSearchDirectory}
            />
          </div>
          <div className="dash-col dash-col-right">
            <SettingsPanel 
              settings={settings}
              onSettingsChange={handleSettingsChange}
              onTestConnection={handleTestConnection}
              onSaveSettings={handleSaveSettings}
            />
          </div>
        </div>
      )}
    </div>
  );
};

export default DashboardPage;
